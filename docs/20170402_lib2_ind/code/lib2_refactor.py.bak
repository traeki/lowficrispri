#!/usr/bin/env python

# Author: John Hawkins (jsh) [really@gmail.com]

import colorcet
import itertools
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
import sys

import data_to_dataframe as dtd

gammasfile = '/'.join([OUTPUT_DIR, 'lib2.gammas.tsv'])
gammas = pd.read_csv(gammasfile, sep='\t', header=0, index_col=[0,1])
countsfile = '/'.join([OUTPUT_DIR, 'lib2.counts.tsv'])
counts = pd.read_csv(countsfile, sep='\t', header=0, index_col=[0,1])
annosfile = '/'.join([OUTPUT_DIR, 'lib2.annos.tsv'])
annos = pd.read_csv(annosfile, sep='\t', header=0, index_col=[0,1])

def 

parent_gammas = parent_map(gammas)


# Partition gammas into:
# -- null (unreliable counts)
# -- verysick (< -0.5)
# -- useful ([-0.5, -2 x std])
# -- zero ([-2 x std, 2 x std])
# -- inverse (> 2 x std)
nullstd = gammas[annos.control].std()
zeroline = nullstd*2
sickline = -0.4
null = gammas.isnull()
verysick = gammas < sickline
useful = (gammas >= sickline) & (gammas < -zeroline)
zero = gammas.abs() <= zeroline
inverse = gammas > zeroline
zeroline
inverse.sum()
verysick.sum()
useful.sum()
zero.sum()


# In[62]:


# jkws = (dict(s=3, alpha=0.5, color='blue'))
# 
# f = plt.figure(0)
# sns.jointplot(annos.offset, gammas.loc[annos.offstrand].A0_A2, joint_kws=jkws, ylim=(-0.8, 0.1))
# sns.plt.suptitle('template by base offset')
# 
# f = plt.figure(1)
# sns.jointplot(annos.offset/annos.gene_len.astype(float), gammas.loc[annos.offstrand].A0_A2, joint_kws=jkws, ylim=(-0.8, 0.1))
# sns.plt.suptitle('template by gene fraction')
# 
# f = plt.figure(2)
# sns.jointplot(annos.offset, gammas.loc[annos.essential & annos.highfi].A0_A2, joint_kws=jkws, ylim=(-0.8, 0.1))
# sns.plt.suptitle('highfi by base offset')
# 
# f = plt.figure(3)
# sns.jointplot(annos.offset/annos.gene_len.astype(float), gammas.loc[annos.essential & annos.highfi].A0_A2, joint_kws=jkws, ylim=(-0.8, 0.1))
# sns.plt.suptitle('highfi by gene fraction')
# 
# f = plt.figure(4)
# sns.jointplot(annos.offset, gammas.loc[annos.essential & (annos.highfi | annos.lowfi)].A0_A2, joint_kws=jkws, ylim=(-0.8, 0.1))
# sns.plt.suptitle('non-template by base offset')
# 
# f = plt.figure(5)
# sns.jointplot(annos.offset/annos.gene_len.astype(float), gammas.loc[annos.essential & (annos.highfi | annos.lowfi)].A0_A2, joint_kws=jkws, ylim=(-0.8, 0.1))
# sns.plt.suptitle('non-template by gene fraction')


# In[63]:


plt.figure(0, figsize=(6,4))
ax = sns.kdeplot(gammas.B0_B2.loc[annos.control].dropna(), label='Control', color='blue')
sns.kdeplot(gammas.B0_B2.loc[annos.essential & annos.highfi].dropna(), label='Match', color='green')
sns.kdeplot(gammas.B0_B2.loc[annos.essential & annos.lowfi].dropna(), label='Mis-Match', color='orange')
# ax.vlines([-zeroline.B0_B2, zeroline.B0_B2], -1, 100, lw=1, linestyle='--', color='blue')
# ax.vlines(sickline, -1, 100, lw=1, linestyle='--', color='black')
ax.set_xlim(-1, .3)
ax.set_ylim(0, 6)
ax.set(xlabel='gamma')
ax.set_title('Phenotypes by sgRNA Category')
plt.savefig('tcm.mismatch.null.pdf')


# In[64]:


olda0 = pd.read_csv('A0_S41_L003_R1_001.fastq.counts.backup', sep='\t', names=['olda0'], index_col=0)
olda0 = (olda0 * 50000000.)/olda0.olda0.sum()
newa0 = pd.read_csv('A0_2NDTRY_L003_R1_001.fastq.counts.backup', sep='\t', names=['newa0'], index_col=0)
newa0 = (newa0 * 50000000.)/newa0.newa0.sum()
b0 = pd.read_csv('B0_S44_L003_R1_001.fastq.counts', sep='\t', names=['b0'], index_col=0)
b0 = (b0 * 50000000.)/b0.b0.sum()
# a1 = pd.read_csv('A1_ORIGINAL_L003_R1_001.fastq.counts', sep='\t', names=['a1'], index_col=0)
a1 = pd.read_csv('A1_2NDTRY_L003_R1_001.fastq.counts', sep='\t', names=['a1'], index_col=0)
a1 = (a1 * 50000000.)/a1.a1.sum()
b1 = pd.read_csv('B1_S45_L003_R1_001.fastq.counts', sep='\t', names=['b1'], index_col=0)
b1 = (b1 * 50000000.)/b1.b1.sum()
a2 = pd.read_csv('A2_S43_L003_R1_001.fastq.counts', sep='\t', names=['a2'], index_col=0)
a2 = (a2 * 50000000.)/a2.a2.sum()
b2 = pd.read_csv('B2_S46_L003_R1_001.fastq.counts', sep='\t', names=['b2'], index_col=0)
b2 = (b2 * 50000000.)/b2.b2.sum()
sns.distplot(b0[b0.b0 < 8000], hist=False, color='yellow')
sns.distplot(a1[a1.a1 < 8000], hist=False, color='green')
sns.distplot(b1[b1.b1 < 8000], hist=False, color='blue')
sns.distplot(a2[a2.a2 < 8000], hist=False, color='violet')
sns.distplot(b2[b2.b2 < 8000], hist=False, color='indigo')
# sns.distplot(olda0[olda0.olda0 < 8000], hist=False, color='red')
#plt.savefig('a0old.pdf')
sns.distplot(newa0[newa0.newa0 < 8000], hist=False, color='orange')
#plt.savefig('a0new.pdf')


# In[65]:


subset = inverse
# low, high = -0.2, -0.01
# subset = ((gammas >= low) & (gammas <= high)) & ~zero
subset.loc[annos.essential].sum()
subset.sum()
subset = subset.loc[annos.essential]
gene_subset = subset.groupby(by=annos.gene_name, group_keys=True).apply(np.sum)
gene_subset.describe()
nullstd
(gene_subset == 0).sum()


# In[66]:


gammas.A0_A2.dropna().shape
gammas.B0_B2.dropna().shape
gammas[['A0_A2', 'B0_B2']].dropna().shape


# In[67]:


plt.figure(0)
sns.lmplot('A0_A2', 'B0_B2', data=gammas,#.loc[annos.essential & annos.highfi],
           scatter_kws=dict(s=5, alpha=.2, color='blue'))
plt.figure(1, figsize=(6,6))
clean = gammas[['A0_A2', 'B0_B2']].dropna()
sns.kdeplot(clean.A0_A2, clean.B0_B2, n_levels=30)
plt.xlabel('Replicate A (gamma)')
plt.ylabel('Replicate B (gamma)')
plt.title('Replicate Agreement')
plt.tight_layout()
plt.savefig('tcm.genomewide.replicates.pdf')


# In[68]:


fig = plt.figure(figsize=(6,6))
sizes=10
x = 'A0_A2'
y = 'B0_B2'
ax = sns.regplot(x, y, data=gammas.loc[annos.control],
                 fit_reg=False,
                 label='controls',
                 scatter_kws=dict(s=5, alpha=0.5, color='blue'))
sns.regplot(x, y, data=gammas.loc[annos.bikard & annos.control],
            fit_reg=False,
            label='bikard',
            scatter_kws=dict(s=10, alpha=1, color='orange'))
(start, stop) = (-1.3, 0.3)
ax.set_xlim(start, stop)
ax.set_ylim(start, stop)
plt.title('Control guide phenotypes with Bikard guides highlighted')
plt.legend()
plt.savefig('/Users/jsh/gd/month/this/bikard.pdf')


# In[69]:


fig = plt.figure(figsize=(6,6))
sizes=10
x = 'A0_A2'
y = 'B0_B2'
ax = sns.regplot(x, y, data=gammas.loc[annos.control],
                 fit_reg=False,
                 label='controls',
                 scatter_kws=dict(s=5, alpha=0.5, color='blue'))
sns.regplot(x, y, data=gammas.loc[annos.altbikard & annos.control],
            fit_reg=False,
            label='TGGTT',
            scatter_kws=dict(s=10, alpha=1, color='orange'))
(start, stop) = (-1.3, 0.3)
ax.set_xlim(start, stop)
ax.set_ylim(start, stop)
plt.title('Control guide phenotypes with Bikard guides highlighted')
plt.legend()
plt.savefig('/Users/jsh/gd/month/this/altbikard.pdf')


# Add in analysis of floors/ceilings
# 
# What rules can we make about the kind of dropoffs
# FOCUS ON:
# *   Things that didn't change the guide
# *   Things that made the guide a control
# *   Things that had some intermediate effect
# 
# Characterize guides / read totals for better than wildtype or worse than hifi
# 
# Also, take yet another look at what "good for doubles" means 
# 
# Analyze MurAA/lowfi-redo

# In[70]:


normal.loc[annos.essential & (diffs.A0_A1 > 0.2) & (diffs.B0_B1 < 0.2)].head()


# In[71]:


case = 'A0_A2'
# null_set = gammas.loc[null[case]]
zero_set = gammas.loc[zero[case]]
useful_set = gammas.loc[useful[case]]
verysick_set = gammas.loc[verysick[case]]
all_singles = single_edit_matrix(gammas)
zero_singles = single_edit_matrix(zero_set)
useful_singles = single_edit_matrix(useful_set)
verysick_singles = single_edit_matrix(verysick_set)
# null_singles = single_edit_matrix(null_set)
# check_singles = sum(
#     [null_singles, zero_singles, useful_singles, verysick_singles])

otherargs = dict(vmin=0, vmax=1, square=True, cmap=colorcet.m_kbc_r)

plt.figure(0)
sns.heatmap((zero_singles/all_singles), **otherargs)
plt.title('ZERO (|gamma| < 2*sigma)')
plt.yticks(rotation=0)
plt.savefig('tcm.genomewide.heatmap.zero.pdf')

plt.figure(1)
sns.heatmap((useful_singles/all_singles), **otherargs)
plt.title('USEFUL (0 > gamma > -0.5)')
plt.yticks(rotation=0)
plt.savefig('tcm.genomewide.heatmap.useful.pdf')

plt.figure(2)
sns.heatmap((verysick_singles/all_singles), **otherargs)
plt.title('VERY SICK (-0.5 > gamma)')
plt.yticks(rotation=0)
plt.savefig('tcm.genomewide.heatmap.verysick.pdf')

# plt.figure(3)
# sns.heatmap((check_singles/all_singles), **otherargs)
# plt.yticks(rotation=0)
# 
# plt.figure(4)
# sns.heatmap((null_singles/all_singles), **otherargs)
# plt.yticks(rotation=0)


# In[72]:


doubles = index_mismatches(gammas).distance == 2

colset = gammas['A0_A2']
# h = colset.loc[high]
# l = colset.loc[low]
plt.figure(0)
ax = sns.distplot(colset[annos.control].dropna(), bins=100, kde=False, label='controls')
sns.distplot(colset[annos.lowfi].dropna(), bins=100, kde=False, label='lowfi')
sns.distplot(colset[doubles].dropna(), bins=100, kde=False, label='2change')
# sns.rugplot(colset[annos.highfi].dropna(), label='highfi')
# sns.rugplot(colset[annos.offstrand].dropna(), label='offstrand')
# sns.kdeplot(h.dropna(), bw=0.02, label='high')
# sns.kdeplot(l.dropna(), bw=0.02, label='low')
# ax.set_xlim(-0.9, .15)
# ax.set_ylim(-0.1, 10)

colset = gammas['B0_B2']
# h = colset.loc[high]
# l = colset.loc[low]
plt.figure(1)
ax = sns.distplot(colset[annos.control].dropna(), bins=100, kde=False, label='controls')
sns.distplot(colset[annos.lowfi].dropna(), bins=100, kde=False, label='lowfi')
sns.distplot(colset[doubles].dropna(), bins=100, kde=False, label='2change')
# sns.rugplot(colset[annos.highfi].dropna(), label='highfi')
# sns.rugplot(colset[annos.offstrand].dropna(), label='offstrand')
# sns.kdeplot(h.dropna(), bw=0.02, label='high')
# sns.kdeplot(l.dropna(), bw=0.02, label='low')
# ax.set_xlim(-0.9, .15)
# ax.set_ylim(-0.1, 10)


# In[73]:


sns.set_palette(sns.color_palette('cubehelix_r', n_colors=4))
sns.set_style('whitegrid')

subset = gammas.loc[annos.essential & annos.highfi]
gene_subset = subset.A0_A2.groupby(by=annos.gene_name, group_keys=True)
pairs = [(x, y) for gene, (x, y) in gene_subset]
x, y = zip(*pairs)

f = plt.figure(0, figsize=(6,6))
ax = plt.scatter(x, y, s=10, color='blue', alpha=.5)
plt.suptitle('Intragene Guide Agreement (gammas)')
plt.savefig('intragene.pdf')


# In[74]:


lc = log_counts(counts + 1)
yset = lc['A0']
xset = lc['A2']

palette = itertools.cycle(sns.color_palette())
jkws = dict(s=10, alpha=0.5, color='green')

strong = annos.highfi & annos.essential & ~doubles
weak = annos.lowfi & annos.essential & ~doubles

f = plt.figure(2)

jkws['color'] = palette.next()
sns.jointplot(xset[strong], yset[strong], joint_kws=jkws, xlim=(0,18), ylim=(0,18))
plt.suptitle('highfi')
jkws['color'] = palette.next()
sns.jointplot(xset[weak], yset[weak], joint_kws=jkws, xlim=(0,18), ylim=(0,18))
plt.suptitle('lowfi (all)')
jkws['color'] = palette.next()
sns.jointplot(xset[doubles], yset[doubles], joint_kws=jkws, xlim=(0,18), ylim=(0,18))
plt.suptitle('lowfi (double mismatch)')
jkws['color'] = palette.next()
sns.jointplot(xset[annos.control], yset[annos.control], joint_kws=jkws, xlim=(0,18), ylim=(0,18))
plt.suptitle('control')


# In[75]:


lc = log_counts(counts + 1)
yset = lc['A0']
xset = lc['B0']

strong = annos.highfi & annos.essential
weak = annos.lowfi & annos.essential

jkws = (dict(s=10, alpha=0.5, color='blue'))

f = plt.figure(2)
sns.jointplot(xset[strong], yset[strong], joint_kws=jkws, xlim=(0,18), ylim=(0,18))
plt.suptitle('highfi')
sns.jointplot(xset[weak], yset[weak], joint_kws=jkws, xlim=(0,18), ylim=(0,18))
plt.suptitle('lowfi (all)')
sns.jointplot(xset[doubles], yset[doubles], joint_kws=jkws, xlim=(0,18), ylim=(0,18))
plt.suptitle('lowfi (double mismatch)')
sns.jointplot(xset[annos.control], yset[annos.control], joint_kws=jkws, xlim=(0,18), ylim=(0,18))
plt.suptitle('control')


# In[76]:


singles = index_mismatches(gammas).distance == 1
doubles = index_mismatches(gammas).distance == 2

sns.set_palette(sns.color_palette('cubehelix_r', n_colors=4))
sns.set_style('whitegrid')

lc = log_counts(counts + 1)


# In[77]:


def plot_family(guide):
    family = gammas.xs(guide, drop_level=False)
    offset = '{0:04d}'.format(annos.loc[guide, guide].offset)
    gene = '{0}'.format(annos.loc[guide, guide].gene_name)
    colset = family['A0_A2']
    start = -0.9
    stop  =  0.1
    count = 101
    binedges = np.linspace(start, stop, count)

    fig = plt.figure(figsize=(6,4))
    ax = sns.distplot(colset[annos.lowfi & annos.essential].dropna(),
                      bins=binedges, kde=False, label='Single Mismatch', color='magenta')
    sns.distplot(colset[doubles & annos.essential].dropna(),
                 bins=binedges, kde=False, label='Double Mismatch', color='blue')
    sns.rugplot(colset[annos.highfi & annos.essential].dropna(),
                axis='x', ax=ax, label='Original Guide',
                height=0.075, linewidth=2, color='crimson')
    ax.set(xlabel='gamma')
    plt.title(gene + ' (' + guide + ')')
    plt.legend(loc='upper left')
    ax.set_xlim(start, stop)
    ax.set_ylim(-0.5, 5.5)
    plt.savefig('.'.join(['family', gene, offset, guide, 'pdf']))
    plt.close(fig)
    
# parents = gammas.loc[annos.highfi & annos.essential].index.get_level_values('original')
# for parent in parents:
#     plot_family(parent)


# In[237]:


parents = gammas.loc[annos.highfi & annos.essential].index.get_level_values('original')
len(parents)
len(gammas.loc[annos.essential])


# In[78]:


weirdcontrols = gammas.loc[annos.control & (gammas < -zeroline).B0_B2]
weirdcontrols


# In[79]:


fig = plt.figure(figsize=(6,6))
sizes=10
x = 'A0_A2'
y = 'B0_B2'
ax = sns.regplot(x, y, data=gammas.loc[annos.control],
                 fit_reg=False,
                 label='controls',
                 scatter_kws=dict(s=5, alpha=0.5, color='blue'))
sns.regplot(x, y, data=gammas.loc[annos.bikard & annos.control],
            fit_reg=False,
            label='bikard',
            scatter_kws=dict(s=10, alpha=1, color='orange'))
(start, stop) = (-1.3, 0.3)
ax.set_xlim(start, stop)
ax.set_ylim(start, stop)
plt.title('Control guide phenotypes with Bikard guides highlighted')
plt.legend()
plt.savefig('/Users/jsh/gd/month/this/bikard.pdf')


# In[80]:


def scatter_family(guide, x, y):
    family = gammas.xs(guide, drop_level=False)
    offset = '{0:04d}'.format(annos.loc[guide, guide].offset)
    gene = '{0}'.format(annos.loc[guide, guide].gene_name)

    fig = plt.figure(figsize=(6,6))
    # sizes_from = x.split('_')[0]
    # sizes = lc[sizes_from]
    sizes=10
    ax = sns.regplot(x, y, data=family.loc[singles], fit_reg=False,
                     label='1_change',
                     scatter_kws=dict(s=sizes, alpha=0.5, color='magenta'))
    sns.regplot(x, y, data=family.loc[doubles], fit_reg=False,
                label='2_change',
                scatter_kws=dict(s=sizes, alpha=0.5, color='blue'))
    sns.regplot(x, y, data=family.loc[annos.highfi], fit_reg=False,
                label='highfi',
                scatter_kws=dict(s=sizes, alpha=1, color='darkred'))
    
    
    (start, stop) = (-1.3, 0.3)
    ax.set_xlim(start, stop)
    ax.set_ylim(start, stop)
    
    plt.title(guide)
    plt.legend()
    plt.savefig('.'.join(['family', gene, offset, guide, x, 'v', y, 'pdf']))
    plt.close(fig)
    
# parents = gammas.loc[annos.highfi].index.get_level_values('original')
# for parent in parents:
#     scatter_family(parent, 'B0_B1', 'B0_B2')
#     scatter_family(parent, 'B0_B1', 'B1_B2')


# In[81]:


family = gammas.xs('AGATCATTGGGCAAATGCCA', drop_level=False)
family.loc[(family['B0_B1'].abs() < 0.02) & (family['B1_B2'].abs() < 0.02)]
family = gammas.xs('GTCTTTGCCGATAAGCCTGT', drop_level=False)
family.loc[(family['B0_B1'].abs() < 0.02) & (family['B1_B2'].abs() < 0.02)]


# In[82]:


sns.set_palette(sns.color_palette('cubehelix', n_colors=4))
sns.set_style('whitegrid')
lc = log_counts(counts + 1)
yset = diffs['A0_A2']
xset = lc['A0']

jkws = dict(s=10, alpha=.2)#, color='blue')
mkws = dict(bins=100)
otherargs = dict(marginal_kws=mkws,
                 joint_kws=jkws,
                 xlim=(2,17), ylim=(-9,2))#, kind='kde', n_levels=20)

strong = annos.highfi & annos.essential
weak = annos.lowfi & annos.essential

f = plt.figure(2)
sns.jointplot(xset[strong], yset[strong], **otherargs)
plt.suptitle('highfi')
sns.jointplot(xset[weak], yset[weak], **otherargs)
plt.suptitle('lowfi (all)')
sns.jointplot(xset[doubles], yset[doubles], **otherargs)
plt.suptitle('lowfi (double mismatch)')
sns.jointplot(xset[annos.control], yset[annos.control], **otherargs)
plt.suptitle('control')


# In[83]:


essgammas = gammas.loc[annos.essential]
(essgammas.B0_B1 < essgammas.B1_B2).sum()
(essgammas.B0_B1 > essgammas.B1_B2).sum()
(essgammas.B0_B1 == essgammas.B1_B2).sum()
(essgammas.B0_B1.isnull() | essgammas.B1_B2.isnull()).sum()
frontlow = essgammas.loc[(essgammas.B0_B1 < essgammas.B1_B2)]
backlow = essgammas.loc[(essgammas.B0_B1 > essgammas.B1_B2)]
(frontlow.B0_B1 - frontlow.B1_B2).abs().median()
(backlow.B0_B1 - backlow.B1_B2).abs().median()


# In[84]:


plt.figure(0, figsize=(12,8))
sns.set_palette(sns.color_palette('Blues', n_colors=1))
sns.set_style('whitegrid')

subset = useful.loc[annos.essential, 'B0_B2']
groups = subset.groupby(by=annos.gene_name, group_keys=True)
genecounts = groups.aggregate(np.sum)
sns.distplot(genecounts, kde=False, bins=np.array(range(55))-0.5)
plt.xlabel('# of "useful" guides\n(gamma outside null set, inside {sickline} cutoff)'.format(**vars()))
plt.ylabel('# of genes in bin')
plt.title('Distribution of "useful" guide counts per essential gene')
plt.tight_layout()
plt.savefig('/Users/jsh/gd/month/1710/20171025.useful.distplot.pdf')


# In[85]:


plt.figure(0, figsize=(12,8))
sns.set_palette(sns.color_palette('Blues', n_colors=1))
sns.set_style('whitegrid')

subset = (useful | zero).loc[annos.essential, 'B0_B2']
groups = subset.groupby(by=annos.gene_name, group_keys=True)
genecounts = groups.aggregate(np.sum)
sns.distplot(genecounts, kde=False, bins=np.array(range(55))-0.5)
plt.xlabel('# of "useful + zero" guides\n(gamma inside {sickline} cutoff)'.format(**vars()))
plt.ylabel('# of genes in bin')
plt.title('Distribution of "useful + zero" guide counts per essential gene')
plt.tight_layout()
plt.savefig('/Users/jsh/gd/month/1710/20171025.useful.or.zero.distplot.pdf')


# In[118]:


guide_bins = pd.concat([verysick.B0_B2, useful.B0_B2,
                        zero.B0_B2, inverse.B0_B2], axis=1,
                       keys=['verysick', 'useful',
                              'zero', 'inverse'])
parent_bins = parent_map(guide_bins)


# In[119]:


new_sickness = parent_bins.useful & guide_bins.verysick
sudden_sickness = parent_bins.zero & guide_bins.verysick
new_utility = parent_bins.verysick & guide_bins.useful
back_utility = parent_bins.zero & guide_bins.useful
new_zero = parent_bins.useful & guide_bins.zero
sudden_zero = parent_bins.verysick & guide_bins.zero

transitions = pd.concat([new_sickness,
                         sudden_sickness,
                         new_utility,
                         back_utility,
                         new_zero,
                         sudden_zero
                        ], axis=1,
                        keys=[
                         'new_sickness',
                         'sudden_sickness',
                         'new_utility',
                         'back_utility',
                         'new_zero',
                         'sudden_zero'
                        ])
transitions.sum().sum()
(parent_bins == guide_bins).all(axis=1).sum()
len(gammas)


# In[120]:


edits = index_mismatches(gammas)
edits.head()


# In[121]:


def make_has_edit_at(i): 
    def has_edit_at(items):
        try:
            iter(items)
        except TypeError:
            return False
        for x in items:
            if x[0] == i:
                return True
        return False
    return has_edit_at
diffdict = dict()
for i in range(20):
    f = make_has_edit_at(i)
    diffdict[i-20] = guide_bins.loc[(edits.distance == 1) &
                                    (edits.edits.apply(f))].sum()
offset_bins = pd.DataFrame.from_dict(diffdict)
offset_bins = offset_bins.stack().reset_index()
offset_bins.columns = ['bin', 'offset', 'tally']
groups = offset_bins.groupby(by=['offset', 'bin']).agg(np.sum)
pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
pct_groups.reset_index(inplace=True)
sns.barplot(data=pct_groups, x='offset', y='tally', hue='bin')
plt.title('bin distributions by offset')
plt.xlabel('offset from PAM')
plt.ylabel('% of guides in bin')
plt.savefig('20171106.bins.by.offset.pdf')


# In[122]:


solo_edits = edits.loc[edits.distance==1].apply(lambda x: x.edits[0][1], axis=1)
transition_groups = guide_bins.groupby(solo_edits)
trans_bins = transition_groups.sum().T.stack().reset_index()
trans_bins.columns = ['bin', 'transition', 'tally']
groups = trans_bins.groupby(by=['transition', 'bin']).agg(np.sum)
pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
pct_groups.reset_index(inplace=True)
sns.barplot(data=pct_groups, x='transition', y='tally', hue='bin')
plt.title('Bin Distributions by Transition')
plt.xlabel('Base Transition')
plt.ylabel('% of Guides in Bin')
plt.savefig('20171106.bins.by.trans.pdf')


# In[123]:


def zone(x):
    assert x in range(20)
    if x < 8:
        return 'TAIL'
    if x < 13:
        return 'MIDDLE'
    return 'HEAD'
solo_edits = edits.loc[edits.distance==1].apply(lambda x: x.edits[0][1], axis=1)
zone = edits.loc[edits.distance==1].apply(lambda x: zone(x.edits[0][0]), axis=1)
zoned_edits = zone + '_' + solo_edits
transition_groups = guide_bins.groupby(zoned_edits)
trans_bins = transition_groups.sum().T.stack().reset_index()
trans_bins.columns = ['bin', 'transition', 'tally']
groups = trans_bins.groupby(by=['transition', 'bin']).agg(np.sum)
pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
pct_groups.reset_index(inplace=True)
sns.barplot(data=pct_groups, x='transition', y='tally', hue='bin')
plt.xticks(rotation=90)
plt.title('Bin Distributions by Transition')
plt.xlabel('Base Transition')
plt.ylabel('% of Guides in Bin')
plt.tight_layout()
plt.savefig('20171106.bins.by.zonetrans.pdf')


# In[124]:


ess_subset = gammas.loc[annos.essential]
ess_edits = index_mismatches(ess_subset)
ess_bins = guide_bins.loc[annos.essential]


# In[125]:


def make_has_edit_at(i): 
    def has_edit_at(items):
        try:
            iter(items)
        except TypeError:
            return False
        for x in items:
            if x[0] == i:
                return True
        return False
    return has_edit_at
diffdict = dict()
for i in range(20):
    f = make_has_edit_at(i)
    diffdict[i-20] = ess_bins.loc[(ess_edits.distance == 1) &
                                  (ess_edits.edits.apply(f))].sum()
offset_bins = pd.DataFrame.from_dict(diffdict)
offset_bins = offset_bins.stack().reset_index()
offset_bins.columns = ['bin', 'offset', 'tally']
groups = offset_bins.groupby(by=['offset', 'bin']).agg(np.sum)
pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
pct_groups.reset_index(inplace=True)
sns.barplot(data=pct_groups, x='offset', y='tally', hue='bin')
plt.title('bin distributions by offset')
plt.xlabel('offset from PAM')
plt.ylabel('% of guides in bin')
plt.savefig('20171114.bins.by.offset.ess.pdf')


# In[126]:


solo_edits = ess_edits.loc[ess_edits.distance==1].apply(lambda x: x.edits[0][1], axis=1)
transition_groups = ess_bins.groupby(solo_edits)
trans_bins = transition_groups.sum().T.stack().reset_index()
trans_bins.columns = ['bin', 'transition', 'tally']
groups = trans_bins.groupby(by=['transition', 'bin']).agg(np.sum)
pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
pct_groups.reset_index(inplace=True)
sns.barplot(data=pct_groups, x='transition', y='tally', hue='bin')
plt.title('Bin Distributions by Transition')
plt.xlabel('Base Transition')
plt.ylabel('% of Guides in Bin')
plt.savefig('20171114.bins.by.trans.ess.pdf')


# In[129]:


def zone(x):
    assert x in range(20)
    if x < 8:
        return 'TAIL'
    if x < 13:
        return 'MIDDLE'
    return 'HEAD'
solo_edits = ess_edits.loc[ess_edits.distance==1].apply(lambda x: x.edits[0][1], axis=1)
zone = ess_edits.loc[ess_edits.distance==1].apply(lambda x: zone(x.edits[0][0]), axis=1)
zoned_edits = zone + '_' + solo_edits
transition_groups = ess_bins.groupby(zoned_edits)
trans_bins = transition_groups.sum().T.stack().reset_index()
trans_bins.columns = ['bin', 'transition', 'tally']
groups = trans_bins.groupby(by=['transition', 'bin']).agg(np.sum)
pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
pct_groups.reset_index(inplace=True)
sns.barplot(data=pct_groups, x='transition', y='tally', hue='bin')
plt.xticks(rotation=90)
plt.title('Bin Distributions by Transition')
plt.xlabel('Base Transition')
plt.ylabel('% of Guides in Bin')
plt.tight_layout()
plt.savefig('20171114.bins.by.zonetrans.ess.pdf')


# In[141]:


sickparent = (parent_gammas.B0_B2 < sickline) & annos.essential
sickparent_subset = gammas.loc[sickparent]
sipa_edits = index_mismatches(sickparent_subset)
sipa_bins = guide_bins.loc[sickparent]
sipa_bins.shape


# In[142]:


def make_has_edit_at(i): 
    def has_edit_at(items):
        try:
            iter(items)
        except TypeError:
            return False
        for x in items:
            if x[0] == i:
                return True
        return False
    return has_edit_at
diffdict = dict()
for i in range(20):
    f = make_has_edit_at(i)
    diffdict[i-20] = sipa_bins.loc[(sipa_edits.distance == 1) &
                                   (sipa_edits.edits.apply(f))].sum()
offset_bins = pd.DataFrame.from_dict(diffdict)
offset_bins = offset_bins.stack().reset_index()
offset_bins.columns = ['bin', 'offset', 'tally']
groups = offset_bins.groupby(by=['offset', 'bin']).agg(np.sum)
pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
pct_groups.reset_index(inplace=True)
sns.barplot(data=pct_groups, x='offset', y='tally', hue='bin')
plt.title('bin distributions by offset')
plt.xlabel('offset from PAM')
plt.ylabel('% of guides in bin')
plt.savefig('20171114.bins.by.offset.sipa.pdf')


# In[143]:


solo_edits = sipa_edits.loc[sipa_edits.distance==1].apply(lambda x: x.edits[0][1], axis=1)
transition_groups = sipa_bins.groupby(solo_edits)
trans_bins = transition_groups.sum().T.stack().reset_index()
trans_bins.columns = ['bin', 'transition', 'tally']
groups = trans_bins.groupby(by=['transition', 'bin']).agg(np.sum)
pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
pct_groups.reset_index(inplace=True)
sns.barplot(data=pct_groups, x='transition', y='tally', hue='bin')
plt.title('Bin Distributions by Transition')
plt.xlabel('Base Transition')
plt.ylabel('% of Guides in Bin')
plt.savefig('20171114.bins.by.trans.sipa.pdf')


# In[144]:


def zone(x):
    assert x in range(20)
    if x < 8:
        return 'TAIL'
    if x < 13:
        return 'MIDDLE'
    return 'HEAD'
solo_edits = sipa_edits.loc[sipa_edits.distance==1].apply(lambda x: x.edits[0][1], axis=1)
zone = sipa_edits.loc[sipa_edits.distance==1].apply(lambda x: zone(x.edits[0][0]), axis=1)
zoned_edits = zone + '_' + solo_edits
transition_groups = sipa_bins.groupby(zoned_edits)
trans_bins = transition_groups.sum().T.stack().reset_index()
trans_bins.columns = ['bin', 'transition', 'tally']
groups = trans_bins.groupby(by=['transition', 'bin']).agg(np.sum)
pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
pct_groups.reset_index(inplace=True)
sns.barplot(data=pct_groups, x='transition', y='tally', hue='bin')
plt.xticks(rotation=90)
plt.title('Bin Distributions by Transition')
plt.xlabel('Base Transition')
plt.ylabel('% of Guides in Bin')
plt.tight_layout()
plt.savefig('20171114.bins.by.zonetrans.sipa.pdf')


# In[201]:


families = gammas.groupby(level=0, axis=0)
bottom = families.quantile(.25)

sickest = gammas.apply(lambda x: x < bottom.loc[x.name[0]], axis=1)


# In[202]:


lowparent = sickest.B0_B2 & annos.essential
# lowparent = (sickest.B0_B2 | (parent_gammas.B0_B2 < sickline)) & annos.essential
lowparent_subset = gammas.loc[lowparent]
lopa_edits = index_mismatches(lowparent_subset)
lopa_bins = guide_bins.loc[lowparent]
lopa_bins.shape


# In[203]:


def make_has_edit_at(i): 
    def has_edit_at(items):
        try:
            iter(items)
        except TypeError:
            return False
        for x in items:
            if x[0] == i:
                return True
        return False
    return has_edit_at
diffdict = dict()
for i in range(20):
    f = make_has_edit_at(i)
    diffdict[i-20] = lopa_bins.loc[(lopa_edits.distance == 1) &
                                   (lopa_edits.edits.apply(f))].sum()
offset_bins = pd.DataFrame.from_dict(diffdict)
offset_bins = offset_bins.stack().reset_index()
offset_bins.columns = ['bin', 'offset', 'tally']
groups = offset_bins.groupby(by=['offset', 'bin']).agg(np.sum)
pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
pct_groups.reset_index(inplace=True)
sns.barplot(data=pct_groups, x='offset', y='tally', hue='bin')
plt.title('bin distributions by offset')
plt.xlabel('offset from PAM')
plt.ylabel('% of guides in bin')
plt.savefig('20171114.bins.by.offset.lopa.pdf')


# In[204]:


solo_edits = lopa_edits.loc[lopa_edits.distance==1].apply(lambda x: x.edits[0][1], axis=1)
transition_groups = lopa_bins.groupby(solo_edits)
trans_bins = transition_groups.sum().T.stack().reset_index()
trans_bins.columns = ['bin', 'transition', 'tally']
groups = trans_bins.groupby(by=['transition', 'bin']).agg(np.sum)
pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
pct_groups.reset_index(inplace=True)
sns.barplot(data=pct_groups, x='transition', y='tally', hue='bin')
plt.title('Bin Distributions by Transition')
plt.xlabel('Base Transition')
plt.ylabel('% of Guides in Bin')
plt.savefig('20171114.bins.by.trans.lopa.pdf')


# In[205]:


def zone(x):
    assert x in range(20)
    if x < 8:
        return 'TAIL'
    if x < 13:
        return 'MIDDLE'
    return 'HEAD'
solo_edits = lopa_edits.loc[lopa_edits.distance==1].apply(lambda x: x.edits[0][1], axis=1)
zone = lopa_edits.loc[lopa_edits.distance==1].apply(lambda x: zone(x.edits[0][0]), axis=1)
zoned_edits = zone + '_' + solo_edits
transition_groups = lopa_bins.groupby(zoned_edits)
trans_bins = transition_groups.sum().T.stack().reset_index()
trans_bins.columns = ['bin', 'transition', 'tally']
groups = trans_bins.groupby(by=['transition', 'bin']).agg(np.sum)
pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
pct_groups.reset_index(inplace=True)
sns.barplot(data=pct_groups, x='transition', y='tally', hue='bin')
plt.xticks(rotation=90)
plt.title('Bin Distributions by Transition')
plt.xlabel('Base Transition')
plt.ylabel('% of Guides in Bin')
plt.tight_layout()
plt.savefig('20171114.bins.by.zonetrans.lopa.pdf')


# In[219]:


lopa_ratios = (gammas/parent_gammas).loc[lowparent]
lopa_shifts = lopa_ratios - 1


# In[223]:


def zone(x):
    assert x in range(20)
    if x < 8:
        return 'TAIL'
    if x < 13:
        return 'MIDDLE'
    return 'HEAD'
solo_edits = lopa_edits.loc[lopa_edits.distance==1].apply(lambda x: x.edits[0][1], axis=1)
zone = lopa_edits.loc[lopa_edits.distance==1].apply(lambda x: zone(x.edits[0][0]), axis=1)
zoned_edits = zone + '_' + solo_edits
transition_groups = lopa_shifts.groupby(zoned_edits)
shifts = transition_groups.agg(np.median).B0_B2.reset_index()
# trans_bins = transition_groups.sum().T.stack().reset_index()
shifts.columns = ['zonetrans', 'med']
# groups = trans_bins.groupby(by=['transition', 'bin']).agg(np.sum)
# pct_groups = groups.groupby(level=0).apply(lambda x: 100 * x / float(x.sum()))
# pct_groups.reset_index(inplace=True)
sns.barplot(data=shifts, x='zonetrans', y='med')
plt.xticks(rotation=90)
plt.title('gamma shift by Zone / Transition')
plt.xlabel('Zone / Base Transition')
plt.ylabel('shift in gamma magnitude (0.0 is no shift)')
plt.tight_layout()
plt.savefig('20171114.shifts.by.zonetrans.lopa.pdf')


# In[235]:


def make_has_edit_at(i): 
    def has_edit_at(items):
        try:
            iter(items)
        except TypeError:
            return False
        for x in items:
            if x[0] == i:
                return True
        return False
    return has_edit_at
diffdict = dict()
for i in range(20):
    f = make_has_edit_at(i)
    diffdict[i-20] = lopa_shifts.loc[(lopa_edits.distance == 1) &
                                     (lopa_edits.edits.apply(f))].B0_B2.median()
offset_shifts = pd.Series(diffdict, name='shift').to_frame()
offset_shifts.reset_index(inplace=True)
offset_shifts.columns = ['offset', 'shift']
sns.barplot(data=offset_shifts, x='offset', y='shift')
plt.title('median shifts by offset')
plt.xlabel('offset from PAM')
plt.ylabel('median gamma shift')
plt.savefig('20171114.shifts.by.offset.lopa.pdf')


# In[238]:


annos.head()

